
# 1 "../usbdsc.c"

# 40 "../typedefs.h"
typedef unsigned char byte;
typedef unsigned int word;
typedef unsigned long dword;

typedef union _BYTE
{
byte _byte;
struct
{
unsigned b0:1;
unsigned b1:1;
unsigned b2:1;
unsigned b3:1;
unsigned b4:1;
unsigned b5:1;
unsigned b6:1;
unsigned b7:1;
};
} BYTE_t;

typedef union _WORD
{
word _word;
struct
{
byte byte0;
byte byte1;
};
struct
{
BYTE_t Byte0;
BYTE_t Byte1;
};
struct
{
BYTE_t LowB;
BYTE_t HighB;
};
struct
{
byte v[2];
};
} WORD_t;



typedef union _DWORD
{
dword _dword;
struct
{
byte byte0;
byte byte1;
byte byte2;
byte byte3;
};
struct
{
word word0;
word word1;
};
struct
{
BYTE_t Byte0;
BYTE_t Byte1;
BYTE_t Byte2;
BYTE_t Byte3;
};
struct
{
WORD_t Word0;
WORD_t Word1;
};
struct
{
byte v[4];
};
} DWORD_t;

# 123
typedef void(*pFunc)(void);

typedef union _POINTER
{
struct
{
byte bLow;
byte bHigh;

};
word _word;



byte* bRam;

word* wRam;


const byte* bRom;
const word* wRom;




} POINTER_t;

# 122 "../usbdefs_std_dsc.h"
typedef struct _USB_DEV_DSC
{
byte bLength; byte bDscType; word bcdUSB;
byte bDevCls; byte bDevSubCls; byte bDevProtocol;
byte bMaxPktSize0; word idVendor; word idProduct;
word bcdDevice; byte iMFR; byte iProduct;
byte iSerialNum; byte bNumCfg;
} USB_DEV_DSC;

# 134
typedef struct _USB_CFG_DSC
{
byte bLength; byte bDscType; word wTotalLength;
byte bNumIntf; byte bCfgValue; byte iCfg;
byte bmAttributes; byte bMaxPower;
} USB_CFG_DSC;

# 144
typedef struct _USB_INTF_DSC
{
byte bLength; byte bDscType; byte bIntfNum;
byte bAltSetting; byte bNumEPs; byte bIntfCls;
byte bIntfSubCls; byte bIntfProtocol; byte iIntf;
} USB_INTF_DSC;

# 154
typedef struct _USB_EP_DSC
{
byte bLength; byte bDscType; byte bEPAdr;
byte bmAttributes; word wMaxPktSize; byte bInterval;
} USB_EP_DSC;

# 131 "../hid.h"
typedef struct _USB_HID_DSC_HEADER
{
byte bDscType;
word wDscLength;
} USB_HID_DSC_HEADER;

typedef struct _USB_HID_DSC
{
byte bLength; byte bDscType; word bcdHID;
byte bCountryCode; byte bNumDsc;
USB_HID_DSC_HEADER hid_dsc_header[1];

# 145
} USB_HID_DSC;


extern byte hid_rpt_rx_len;


void HIDInitEP(void);
void USBCheckHIDRequest(void);
void HIDTxReport(char *buffer, byte len);
byte HIDRxReport(char *buffer, byte len);

# 53 "../usbdsc.h"
typedef const struct { USB_CFG_DSC cd01; USB_INTF_DSC i00a00; USB_HID_DSC hid_i00a00; USB_EP_DSC ep01i_i00a00; USB_EP_DSC ep01o_i00a00; } CFG01_t;

# 62
typedef const struct{
byte report[29];
}HID_RPT01_t;




extern const USB_DEV_DSC device_dsc;
extern CFG01_t cfg01;
extern const unsigned char *const USB_CD_Ptr[];
extern const unsigned char *const USB_SD_Ptr[];

extern HID_RPT01_t hid_rpt01;
extern const pFunc ClassReqHandler[1];

# 59 "../usbdefs_ep0_buff.h"
typedef union _CTRL_TRF_SETUP
{

struct
{
byte _byte[8];
};


struct
{
byte bmRequestType;
byte bRequest;
word wValue;
word wIndex;
word wLength;
};
struct
{
unsigned :8;
unsigned :8;
WORD_t W_Value;
WORD_t W_Index;
WORD_t W_Length;
};
struct
{
unsigned Recipient:5;
unsigned RequestType:2;
unsigned DataDir:1;
unsigned :8;
byte bFeature;
unsigned :8;
unsigned :8;
unsigned :8;
unsigned :8;
unsigned :8;
};
struct
{
unsigned :8;
unsigned :8;
byte bDscIndex;
byte bDscType;
word wLangID;
unsigned :8;
unsigned :8;
};
struct
{
unsigned :8;
unsigned :8;
BYTE_t bDevADR;
byte bDevADRH;
unsigned :8;
unsigned :8;
unsigned :8;
unsigned :8;
};
struct
{
unsigned :8;
unsigned :8;
byte bCfgValue;
byte bCfgRSD;
unsigned :8;
unsigned :8;
unsigned :8;
unsigned :8;
};
struct
{
unsigned :8;
unsigned :8;
byte bAltID;
byte bAltID_H;
byte bIntfID;
byte bIntfID_H;
unsigned :8;
unsigned :8;
};
struct
{
unsigned :8;
unsigned :8;
unsigned :8;
unsigned :8;
byte bEPID;
byte bEPID_H;
unsigned :8;
unsigned :8;
};
struct
{
unsigned :8;
unsigned :8;
unsigned :8;
unsigned :8;
unsigned EPNum:4;
unsigned :3;
unsigned EPDir:1;
unsigned :8;
unsigned :8;
unsigned :8;
};


} CTRL_TRF_SETUP;

# 179
typedef union _CTRL_TRF_DATA
{

struct
{
byte _byte[8];
};


struct
{
byte _byte0;
byte _byte1;
byte _byte2;
byte _byte3;
byte _byte4;
byte _byte5;
byte _byte6;
byte _byte7;
};
struct
{
word _word0;
word _word1;
word _word2;
word _word3;
};

} CTRL_TRF_DATA;

# 70 "../usbmmap.h"
typedef union _USB_DEVICE_STATUS
{
byte _byte;
struct
{
unsigned RemoteWakeup:1;
unsigned ctrl_trf_mem:1;
};
} USB_DEVICE_STATUS;

typedef union _BD_STAT
{
byte _byte;
struct{
unsigned BC8:1;
unsigned BC9:1;
unsigned BSTALL:1;
unsigned DTSEN:1;
unsigned INCDIS:1;
unsigned KEN:1;
unsigned DTS:1;
unsigned UOWN:1;
};
struct{
unsigned BC8:1;
unsigned BC9:1;
unsigned PID0:1;
unsigned PID1:1;
unsigned PID2:1;
unsigned PID3:1;
unsigned :1;
unsigned UOWN:1;
};
struct{
unsigned :2;
unsigned PID:4;
unsigned :2;
};
} BD_STAT;

typedef union _BDT
{
struct
{
BD_STAT Stat;
byte Cnt;
byte ADRL;
byte ADRH;
};
struct
{
unsigned :8;
unsigned :8;
byte* ADR;
};
} BDT;


extern byte usb_device_state;
extern USB_DEVICE_STATUS usb_stat;
extern byte usb_active_cfg;
extern byte usb_alt_intf[1];

extern volatile BDT ep0Bo;
extern volatile BDT ep0Bi;
extern volatile BDT ep1Bo;
extern volatile BDT ep1Bi;

# 167
extern volatile
CTRL_TRF_SETUP SetupPkt;
extern volatile
CTRL_TRF_DATA CtrlTrfData;


extern volatile unsigned char hid_report_out[64];
extern volatile unsigned char hid_report_in[64];

# 206 "../usbdrv.h"
void USBCheckBusStatus(void);
void USBDriverService(void);
void USBRemoteWakeup(void);
void USBSoftDetach(void);

void ClearArray(byte* startAdr,byte count);

# 88 "../usbctrltrf.h"
extern byte ctrl_trf_session_owner;

extern POINTER_t pSrc;
extern POINTER_t pDst;
extern WORD_t wCount;


byte USBCtrlEPService(void);
void USBCtrlTrfTxService(void);
void USBCtrlTrfRxService(void);
void USBCtrlEPServiceComplete(void);
void USBPrepareForNextSetupTrf(void);

# 92 "../usb9.h"
void USBCheckStdRequest(void);

# 180 "../usbdsc.c"
const USB_DEV_DSC device_dsc=
{
sizeof(USB_DEV_DSC),
0x01,
0x0200,
0x00,
0x00,
0x00,
8,
0x04D8,
0x003C,
0x0002,
0x01,
0x02,
0x00,
0x01
};


CFG01_t cfg01={

sizeof(USB_CFG_DSC),
0x02,
sizeof(cfg01),
1,
1,
0,
0x01<<7|0x01<<6,
50,


sizeof(USB_INTF_DSC),
0x04,
0,
0,
2,
0x03,
0,
0,
0,


sizeof(USB_HID_DSC),
0x21,
0x0111,
0x00,
1,
0x22,
sizeof(hid_rpt01),


sizeof(USB_EP_DSC),0x05,0x81,0x03,64,0x01,
sizeof(USB_EP_DSC),0x05,0x01,0x03,64,0x01
};

const struct{byte bLength;byte bDscType;word string[1];}sd000={
sizeof(sd000),0x03,0x0409};

const struct{byte bLength;byte bDscType;word string[25];}sd001={
sizeof(sd001),0x03,
'M','i','c','r','o','c','h','i','p',' ',
'T','e','c','h','n','o','l','o','g','y',' ','I','n','c','.'};

const struct{byte bLength;byte bDscType;word string[18];}sd002={
sizeof(sd002),0x03,
'H','I','D',' ','U','S','B',' ','B','o','o',
't','l','o','a','d','e','r'};

HID_RPT01_t hid_rpt01={

# 254
{
0x06, 0x00, 0xFF,
0x09, 0x01,
0xA1, 0x01,
0x19, 0x01,
0x29, 0x40,
0x15, 0x00,
0x26, 0xFF, 0x00,
0x75, 0x08,
0x95, 0x40,
0x81, 0x00,
0x19, 0x01,
0x29, 0x40,
0x91, 0x00,
0xC0}
};

const unsigned char *const USB_CD_Ptr[]=
{
(const unsigned char *const)&cfg01,
(const unsigned char *const)&cfg01
};
const unsigned char *const USB_SD_Ptr[]=
{
(const unsigned char *const)&sd000,
(const unsigned char *const)&sd001,
(const unsigned char *const)&sd002
};

const pFunc ClassReqHandler[1]=
{
&USBCheckHIDRequest
};

